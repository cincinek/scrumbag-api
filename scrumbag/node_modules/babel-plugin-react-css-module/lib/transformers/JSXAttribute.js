"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@babel/core");
const cache_1 = require("../cache");
class ClassNamePlugin {
    constructor(_path) {
        this._path = _path;
        this._node = _path.node;
        this.StringLiteral();
        this.JSXExpressionContainer();
    }
    _getExpression(value) {
        return core_1.types.callExpression(core_1.types.identifier(cache_1.cssVar), [value]);
    }
    _replaceExpression(value) {
        if (cache_1.default.getStyles().length > 0) {
            this._path.replaceWith(core_1.types.jsxAttribute(core_1.types.jsxIdentifier('className'), core_1.types.jsxExpressionContainer(this._getExpression(value))));
        }
    }
    StringLiteral() {
        if (core_1.types.isStringLiteral(this._node.value)) {
            this._replaceExpression(this._node.value);
        }
    }
    JSXExpressionContainer() {
        if (core_1.types.isJSXExpressionContainer(this._node.value)) {
            if (!core_1.types.isCallExpression(this._node.value.expression)) {
                this._replaceExpression(this._node.value.expression);
            }
            else {
                if (core_1.types.isIdentifier(this._node.value.expression.callee)) {
                    if (this._node.value.expression.callee.name !== cache_1.cssVar) {
                        this._replaceExpression(this._node.value.expression);
                    }
                }
            }
        }
    }
}
exports.default = {
    JSXAttribute(path) {
        const { node } = path;
        if (node.name.name === 'className') {
            new ClassNamePlugin(path);
        }
    },
};
